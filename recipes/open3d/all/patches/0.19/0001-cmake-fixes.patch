From d373218480c1ec0a3cf78a590ef21a4630ac9410 Mon Sep 17 00:00:00 2001
From: Martin Valgur <martin.valgur@gmail.com>
Date: Thu, 2 Oct 2025 01:04:21 +0300
Subject: [PATCH 1/3] cmake fixes

---
 CMakeLists.txt                          | 21 ---------------------
 cmake/Open3DAddCompiledMaterials.cmake  |  2 +-
 cmake/Open3DSetGlobalProperties.cmake   |  5 +----
 cmake/Open3DShowAndAbortOnWarning.cmake |  1 +
 cpp/open3d/utility/FileSystem.cpp       | 10 +---------
 cpp/pybind/pybind_filesystem.h          | 12 ++----------
 6 files changed, 6 insertions(+), 45 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 354125dc0..7025443c2 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -145,12 +145,6 @@ option(BUNDLE_OPEN3D_ML           "Includes the Open3D-ML repo in the wheel" OFF
 
 # Release build options
 option(DEVELOPER_BUILD      "Add +commit_hash to the project version number" ON )
-if (NOT DEVELOPER_BUILD)
-    if (NOT BUILD_COMMON_CUDA_ARCHS)
-        set(BUILD_COMMON_CUDA_ARCHS ON CACHE BOOL "Build for common CUDA GPUs (for release)" FORCE)
-        message(WARNING "Setting BUILD_COMMON_CUDA_ARCHS=ON since DEVELOPER_BUILD is OFF.")
-    endif()
-endif()
 
 # Default build type on single-config generators.
 # For multi-config generators (e.g. Visual Studio), CMAKE_CONFIGURATION_TYPES
@@ -528,24 +522,9 @@ include(Open3DSetGlobalProperties)
 include(Open3DShowAndAbortOnWarning)
 include(Open3DSYCLTargetSources)
 
-# Enumerate all third-party libraries which we need later
-# This creates the necessary targets and sets the
-# Open3D_3RDPARTY_*_TARGETS variables we use in open3d_link_3rdparty_libraries
-include(3rdparty/find_dependencies.cmake)
-
 # Open3D library
 add_subdirectory(cpp)
 
-# Examples
-add_subdirectory(examples)
-
-# Documentation
-add_subdirectory(docs)
-
-# Install CMake configuration files
-install(EXPORT ${PROJECT_NAME}Targets NAMESPACE ${PROJECT_NAME}:: DESTINATION ${Open3D_INSTALL_CMAKE_DIR})
-export(EXPORT ${PROJECT_NAME}Targets NAMESPACE ${PROJECT_NAME}::)
-
 if (Python3_EXECUTABLE)
     # `make check-style` checks style for c++/cuda/python/ipynb files
     add_custom_target(check-style
diff --git a/cmake/Open3DAddCompiledMaterials.cmake b/cmake/Open3DAddCompiledMaterials.cmake
index 171e57e63..509d4e96e 100644
--- a/cmake/Open3DAddCompiledMaterials.cmake
+++ b/cmake/Open3DAddCompiledMaterials.cmake
@@ -53,7 +53,7 @@ function(open3d_add_compiled_materials target)
             OUTPUT ${COMPILED_MATERIAL_FULL_PATH}
             COMMAND ${FILAMENT_MATC} ${FILAMENT_MATC_ARGS} -o ${COMPILED_MATERIAL_FULL_PATH} ${MATERIAL_FULL_PATH}
             COMMENT "Building Material object ${COMPILED_MATERIAL_RELATIVE_PATH}"
-            MAIN_DEPENDENCY ${mat} DEPENDS Open3D::3rdparty_filament
+            MAIN_DEPENDENCY ${mat}
             VERBATIM
         )
 
diff --git a/cmake/Open3DSetGlobalProperties.cmake b/cmake/Open3DSetGlobalProperties.cmake
index ce8ff8d21..183ac0c94 100644
--- a/cmake/Open3DSetGlobalProperties.cmake
+++ b/cmake/Open3DSetGlobalProperties.cmake
@@ -79,7 +79,7 @@ function(open3d_set_global_properties target)
     # - On latest macOS/Windows with the default compiler:
     #   - "" works.
     if(UNIX AND NOT APPLE)
-        target_link_libraries(${target} PRIVATE stdc++fs)
+#        target_link_libraries(${target} PRIVATE stdc++fs)
     endif()
 
     # Colorize GCC/Clang terminal outputs
@@ -94,9 +94,6 @@ function(open3d_set_global_properties target)
         $<INSTALL_INTERFACE:${Open3D_INSTALL_INCLUDE_DIR}>
     )
 
-    # Required for static linking zeromq
-    target_compile_definitions(${target} PRIVATE ZMQ_STATIC)
-
     # Propagate build configuration into source code
     if (BUILD_CUDA_MODULE)
         target_compile_definitions(${target} PRIVATE BUILD_CUDA_MODULE)
diff --git a/cmake/Open3DShowAndAbortOnWarning.cmake b/cmake/Open3DShowAndAbortOnWarning.cmake
index c95bfa75a..8ff463042 100644
--- a/cmake/Open3DShowAndAbortOnWarning.cmake
+++ b/cmake/Open3DShowAndAbortOnWarning.cmake
@@ -2,6 +2,7 @@
 #
 # Enables warnings when compiling <target> and enables treating warnings as errors.
 function(open3d_show_and_abort_on_warning target)
+    return()
 
     set(DISABLE_MSVC_WARNINGS
         /Wv:18         # ignore warnings introduced in Visual Studio 2015 and later.
diff --git a/cpp/open3d/utility/FileSystem.cpp b/cpp/open3d/utility/FileSystem.cpp
index 604507edc..dfa5045a0 100644
--- a/cpp/open3d/utility/FileSystem.cpp
+++ b/cpp/open3d/utility/FileSystem.cpp
@@ -28,16 +28,8 @@
 #include <unistd.h>
 #endif
 
-#ifdef WIN32
-#define _SILENCE_EXPERIMENTAL_FILESYSTEM_DEPRECATION_WARNING
-#endif
-#ifdef __APPLE__
 #include <filesystem>
-namespace fs = std::__fs::filesystem;
-#else
-#include <experimental/filesystem>
-namespace fs = std::experimental::filesystem;
-#endif
+namespace fs = std::filesystem;
 
 #include "open3d/utility/Logging.h"
 
diff --git a/cpp/pybind/pybind_filesystem.h b/cpp/pybind/pybind_filesystem.h
index 3617d6cad..66105f3ab 100644
--- a/cpp/pybind/pybind_filesystem.h
+++ b/cpp/pybind/pybind_filesystem.h
@@ -20,17 +20,9 @@
 #include <pybind11/pytypes.h>
 
 #include <string>
-
-#ifdef WIN32
-#define _SILENCE_EXPERIMENTAL_FILESYSTEM_DEPRECATION_WARNING
-#endif
-#ifdef __APPLE__
 #include <filesystem>
-namespace fs = std::__fs::filesystem;
-#else
-#include <experimental/filesystem>
-namespace fs = std::experimental::filesystem;
-#endif
+
+namespace fs = std::filesystem;
 
 namespace pybind11 {
 namespace detail {
-- 
2.43.0

