--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,4 +1,4 @@
-CMAKE_MINIMUM_REQUIRED(VERSION 2.8.12 FATAL_ERROR)
+CMAKE_MINIMUM_REQUIRED(VERSION 3.15)
 
 INCLUDE(GNUInstallDirs)
 INCLUDE(CheckCSourceCompiles)
@@ -107,8 +107,8 @@
 
 IF(NNPACK_BACKEND STREQUAL "x86-64")
   # ---[ We need a Python interpreter to build PeachPy sources for x86-64
-  FIND_PACKAGE(PythonInterp)
-  IF(NOT PYTHONINTERP_FOUND)
+  find_package(Python COMPONENTS Interpreter REQUIRED)
+  IF(0)
     MESSAGE(STATUS "Python interpreter not found; and PeachPy sources for x86-64 backend can't be built without it. Fall back to PSIMD backend")
     SET(NNPACK_BACKEND "psimd")
   ENDIF()
@@ -122,7 +122,7 @@
 SET(CONFU_DEPENDENCIES_BINARY_DIR ${CMAKE_BINARY_DIR}/deps
   CACHE PATH "Confu-style dependencies binary directory")
 
-IF(NNPACK_BACKEND STREQUAL "x86-64")
+IF(0)
   IF(NOT DEFINED PYTHON_SIX_SOURCE_DIR)
     MESSAGE(STATUS "Downloading six (Python package) to ${CONFU_DEPENDENCIES_SOURCE_DIR}/six (define PYTHON_SIX_SOURCE_DIR to avoid it)")
     CONFIGURE_FILE(cmake/DownloadSix.cmake "${CONFU_DEPENDENCIES_BINARY_DIR}/six-download/CMakeLists.txt")
@@ -177,7 +177,7 @@
   ENDIF()
 ENDIF()
 
-IF(NOT DEFINED CPUINFO_SOURCE_DIR)
+IF(0)
   MESSAGE(STATUS "Downloading cpuinfo to ${CONFU_DEPENDENCIES_SOURCE_DIR}/cpuinfo (define CPUINFO_SOURCE_DIR to avoid it)")
   CONFIGURE_FILE(cmake/DownloadCpuinfo.cmake "${CONFU_DEPENDENCIES_BINARY_DIR}/cpuinfo-download/CMakeLists.txt")
   EXECUTE_PROCESS(COMMAND "${CMAKE_COMMAND}" -G "${CMAKE_GENERATOR}" .
@@ -187,7 +187,7 @@
   SET(CPUINFO_SOURCE_DIR "${CONFU_DEPENDENCIES_SOURCE_DIR}/cpuinfo" CACHE STRING "cpuinfo source directory")
 ENDIF()
 
-IF(NOT DEFINED FP16_SOURCE_DIR)
+IF(0)
   MESSAGE(STATUS "Downloading FP16 to ${CONFU_DEPENDENCIES_SOURCE_DIR}/fp16 (define FP16_SOURCE_DIR to avoid it)")
   CONFIGURE_FILE(cmake/DownloadFP16.cmake "${CONFU_DEPENDENCIES_BINARY_DIR}/fp16-download/CMakeLists.txt")
   EXECUTE_PROCESS(COMMAND "${CMAKE_COMMAND}" -G "${CMAKE_GENERATOR}" .
@@ -197,7 +197,7 @@
   SET(FP16_SOURCE_DIR "${CONFU_DEPENDENCIES_SOURCE_DIR}/fp16" CACHE STRING "FP16 source directory")
 ENDIF()
 
-IF(NOT DEFINED FXDIV_SOURCE_DIR)
+IF(0)
   MESSAGE(STATUS "Downloading FXdiv to ${CONFU_DEPENDENCIES_SOURCE_DIR}/fxdiv (define FXDIV_SOURCE_DIR to avoid it)")
   CONFIGURE_FILE(cmake/DownloadFXdiv.cmake "${CONFU_DEPENDENCIES_BINARY_DIR}/fxdiv-download/CMakeLists.txt")
   EXECUTE_PROCESS(COMMAND "${CMAKE_COMMAND}" -G "${CMAKE_GENERATOR}" .
@@ -207,7 +207,7 @@
   SET(FXDIV_SOURCE_DIR "${CONFU_DEPENDENCIES_SOURCE_DIR}/fxdiv" CACHE STRING "FXdiv source directory")
 ENDIF()
 
-IF(NOT DEFINED PSIMD_SOURCE_DIR)
+IF(0)
   MESSAGE(STATUS "Downloading PSimd to ${CONFU_DEPENDENCIES_SOURCE_DIR}/psimd (define PSIMD_SOURCE_DIR to avoid it)")
   CONFIGURE_FILE(cmake/DownloadPSimd.cmake "${CONFU_DEPENDENCIES_BINARY_DIR}/psimd-download/CMakeLists.txt")
   EXECUTE_PROCESS(COMMAND "${CMAKE_COMMAND}" -G "${CMAKE_GENERATOR}" .
@@ -217,7 +217,7 @@
   SET(PSIMD_SOURCE_DIR "${CONFU_DEPENDENCIES_SOURCE_DIR}/psimd" CACHE STRING "PSimd source directory")
 ENDIF()
 
-IF(NOT DEFINED PTHREADPOOL_SOURCE_DIR)
+IF(0)
   MESSAGE(STATUS "Downloading pthreadpool to ${CONFU_DEPENDENCIES_SOURCE_DIR}/pthreadpool (define PTHREADPOOL_SOURCE_DIR to avoid it)")
   CONFIGURE_FILE(cmake/DownloadPThreadPool.cmake "${CONFU_DEPENDENCIES_BINARY_DIR}/pthreadpool-download/CMakeLists.txt")
   EXECUTE_PROCESS(COMMAND "${CMAKE_COMMAND}" -G "${CMAKE_GENERATOR}" .
@@ -427,8 +427,7 @@
       FILE(MAKE_DIRECTORY ${obj_dir})
       ADD_CUSTOM_COMMAND(
         OUTPUT ${obj}
-        COMMAND "PYTHONPATH=${PEACHPY_PYTHONPATH}"
-          ${PYTHON_EXECUTABLE} -m peachpy.x86_64
+        COMMAND ${Python_EXECUTABLE} -m peachpy.x86_64
             -mabi=sysv -g4 -mimage-format=${PEACHPY_IMAGE_FORMAT}
             "-I${PROJECT_SOURCE_DIR}/src" "-I${PROJECT_SOURCE_DIR}/src/x86_64-fma" "-I${FP16_SOURCE_DIR}/include"
             -o ${obj} "${PROJECT_SOURCE_DIR}/${src}"
@@ -495,8 +494,13 @@
 NNPACK_TARGET_ENABLE_C99(nnpack_reference_layers)
 TARGET_INCLUDE_DIRECTORIES(nnpack_reference_layers PUBLIC include)
 
+find_package(fxdiv REQUIRED)
+
+find_package(psimd REQUIRED)
+
 # ---[ Configure cpuinfo
-IF(NOT TARGET cpuinfo)
+find_package(cpuinfo REQUIRED)
+IF(0)
   SET(CPUINFO_BUILD_TOOLS OFF CACHE BOOL "")
   SET(CPUINFO_BUILD_UNIT_TESTS OFF CACHE BOOL "")
   SET(CPUINFO_BUILD_MOCK_TESTS OFF CACHE BOOL "")
@@ -508,7 +512,8 @@
 TARGET_LINK_LIBRARIES(nnpack PRIVATE cpuinfo)
 
 # ---[ Configure pthreadpool
-IF(NOT TARGET pthreadpool)
+find_package(pthreadpool REQUIRED)
+IF(0)
   SET(PTHREADPOOL_BUILD_TESTS OFF CACHE BOOL "")
   SET(PTHREADPOOL_BUILD_BENCHMARKS OFF CACHE BOOL "")
   ADD_SUBDIRECTORY(
@@ -525,6 +530,7 @@
 TARGET_LINK_LIBRARIES(nnpack_reference_layers PUBLIC pthreadpool)
 
 # ---[ Configure FXdiv
+find_package(fxdiv REQUIRED)
 IF(NOT TARGET fxdiv)
   SET(FXDIV_BUILD_TESTS OFF CACHE BOOL "")
   SET(FXDIV_BUILD_BENCHMARKS OFF CACHE BOOL "")
@@ -535,15 +541,19 @@
 TARGET_LINK_LIBRARIES(nnpack PRIVATE fxdiv)
 
 # ---[ Configure psimd
-IF(NOT TARGET psimd)
+IF(0)
   ADD_SUBDIRECTORY(
     "${PSIMD_SOURCE_DIR}"
     "${CONFU_DEPENDENCIES_BINARY_DIR}/psimd")
 ENDIF()
-TARGET_LINK_LIBRARIES(nnpack PRIVATE psimd)
+if(NNPACK_BACKEND STREQUAL "psimd")
+  find_package(psimd REQUIRED)
+  TARGET_LINK_LIBRARIES(nnpack PRIVATE psimd)
+endif()
 
 # ---[ Configure FP16
-IF(NOT TARGET fp16)
+find_package(fp16 REQUIRED)
+IF(0)
   SET(FP16_BUILD_TESTS OFF CACHE BOOL "")
   SET(FP16_BUILD_BENCHMARKS OFF CACHE BOOL "")
   ADD_SUBDIRECTORY(
@@ -556,7 +566,15 @@
 INSTALL(TARGETS nnpack
     LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
     ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
     PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})
+
+if(NNPACK_LIBRARY_TYPE STREQUAL "static")
+  INSTALL(TARGETS nnpack_reference_layers
+      LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+      ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+      RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})
+endif()
 
 IF(NNPACK_BUILD_TESTS)
   # ---[ Build google test
