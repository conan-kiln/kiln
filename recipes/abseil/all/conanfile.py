import json
import os
import re

from conan import ConanFile
from conan.errors import ConanInvalidConfiguration
from conan.tools.apple import is_apple_os
from conan.tools.build import check_min_cppstd
from conan.tools.cmake import CMake, CMakeToolchain, cmake_layout
from conan.tools.files import *
from conan.tools.microsoft import is_msvc, is_msvc_static_runtime
from conan.tools.scm import Version

required_conan_version = ">=2.1"

class AbseilConan(ConanFile):
    name = "abseil"
    description = "Abseil Common Libraries (C++) from Google"
    topics = ("algorithm", "container", "google", "common", "utility")
    homepage = "https://github.com/abseil/abseil-cpp"
    license = "Apache-2.0"

    package_type = "library"
    settings = "os", "arch", "compiler", "build_type"
    options = {
        "shared": [True, False],
        "fPIC": [True, False],
    }
    default_options = {
        "shared": False,
        "fPIC": True,
    }
    short_paths = True
    extension_properties = {"compatibility_cppstd": False}

    def export_sources(self):
        export_conandata_patches(self)

    def validate(self):
        check_min_cppstd(self, 14)

        if self.options.shared and is_msvc(self) and Version(self.version) < "20230802.1":
            # upstream tries its best to export symbols, but it's broken for the moment
            raise ConanInvalidConfiguration(f"{self.ref} shared not availabe for Visual Studio, please use version 20230802.1 or newer")

    def build_requirements(self):
        # https://github.com/abseil/abseil-cpp/blob/20240722.0/CMakeLists.txt#L19
        if Version(self.version) >= "20240722.0":
            self.tool_requires("cmake/[>=3.16 <5]")

    def layout(self):
        cmake_layout(self, src_folder="src")

    def source(self):
        get(self, **self.conan_data["sources"][self.version], strip_root=True)
        apply_conandata_patches(self)

    def generate(self):
        tc = CMakeToolchain(self)
        tc.cache_variables["ABSL_ENABLE_INSTALL"] = True
        tc.cache_variables["ABSL_PROPAGATE_CXX_STD"] = True
        tc.cache_variables["BUILD_TESTING"] = False
        if is_msvc(self):
            tc.cache_variables["ABSL_MSVC_STATIC_RUNTIME"] = is_msvc_static_runtime(self)
        tc.generate()

    def build(self):
        cmake = CMake(self)
        cmake.configure()
        cmake.build()

    def package(self):
        copy(self, "LICENSE", src=self.source_folder, dst=os.path.join(self.package_folder, "licenses"))
        cmake = CMake(self)
        cmake.install()
        rmdir(self, os.path.join(self.package_folder, "lib", "pkgconfig"))

        # Load components hierarchy before removing CMake files generated by abseil installation
        cmake_folder = os.path.join(self.package_folder, "lib", "cmake")
        absl_targets_file = os.path.join(cmake_folder, "absl", "abslTargets.cmake")
        components = self._load_components_from_cmake_target_file(absl_targets_file)
        rmdir(self, cmake_folder)

        # Create a json helper file in order to populate package_info() at consume time
        self._create_components_file(self._components_helper_filepath, components)

    def _load_components_from_cmake_target_file(self, absl_target_file_path):
        components = {}

        abs_target_content = load(self, absl_target_file_path)

        # Replace the line endings to support building with MSys2 on Windows
        abs_target_content = abs_target_content.replace("\r\n", "\n")

        cmake_functions = re.findall(r"(?P<func>add_library|set_target_properties)[\n|\s]*\([\n|\s]*(?P<args>[^)]*)\)", abs_target_content)
        for (cmake_function_name, cmake_function_args) in cmake_functions:
            cmake_function_args = re.split(r"[\s|\n]+", cmake_function_args, maxsplit=2)

            cmake_target_name = cmake_function_args[0]
            component = cmake_target_name.replace("absl::", "")

            components.setdefault(component, {})

            if cmake_function_name == "add_library":
                cmake_imported_target_type = cmake_function_args[1]
                if cmake_imported_target_type in ["STATIC", "SHARED"]:
                    lib_name = "absl_" + component if component != "abseil_dll" else "abseil_dll"
                    components[component]["libs"] = [lib_name]
            elif cmake_function_name == "set_target_properties":
                target_properties = re.findall(r"(?P<property>INTERFACE_COMPILE_DEFINITIONS|INTERFACE_INCLUDE_DIRECTORIES|INTERFACE_LINK_LIBRARIES)[\n|\s]+(?P<values>.+)", cmake_function_args[2])
                for target_property in target_properties:
                    property_type = target_property[0]
                    if property_type == "INTERFACE_LINK_LIBRARIES":
                        values_list = target_property[1].replace('"', "").split(";")
                        for dependency in values_list:
                            if dependency.startswith("absl::"): # abseil targets
                                components[component].setdefault("requires", []).append(dependency.replace("absl::", ""))
                            else: # system libs or frameworks
                                if self.settings.os in ["Linux", "FreeBSD"]:
                                    if dependency == "Threads::Threads":
                                        components[component].setdefault("system_libs", []).append("pthread")
                                    elif "-lm" in dependency:
                                        components[component].setdefault("system_libs", []).append("m")
                                    elif "-lrt" in dependency:
                                        components[component].setdefault("system_libs", []).append("rt")
                                elif self.settings.os == "Windows":
                                    for system_lib in ["bcrypt", "advapi32", "dbghelp"]:
                                        if system_lib in dependency:
                                            components[component].setdefault("system_libs", []).append(system_lib)
                                elif is_apple_os(self):
                                    for framework in ["CoreFoundation"]:
                                        if framework in dependency:
                                            components[component].setdefault("frameworks", []).append(framework)
                    elif property_type == "INTERFACE_COMPILE_DEFINITIONS":
                        values_list = target_property[1].replace('"', "").split(";")
                        for definition in values_list:
                            if definition == r"\$<\$<PLATFORM_ID:AIX>:_LINUX_SOURCE_COMPAT>":
                                if self.settings.os == "AIX":
                                    components[component].setdefault("defines", []).append("_LINUX_SOURCE_COMPAT")
                            else:
                                components[component].setdefault("defines", []).append(definition)

        return components

    def _create_components_file(self, output_file, components):
        content = json.dumps(components, indent=4)
        save(self, output_file, content)

    @property
    def _components_helper_filepath(self):
        return os.path.join(self.package_folder, "lib", "components.json")

    def package_info(self):
        self.cpp_info.set_property("cmake_file_name", "absl")

        components_json_file = load(self, self._components_helper_filepath)
        abseil_components = json.loads(components_json_file)
        for component_name, values in abseil_components.items():
            component = self.cpp_info.components[component_name]
            component.set_property("cmake_target_name", f"absl::{component_name}")
            component.set_property("pkg_config_name", f"absl_{component_name}")
            component.libs = values.get("libs", [])
            component.defines = values.get("defines", [])
            component.system_libs = values.get("system_libs", [])
            component.frameworks = values.get("frameworks", [])
            component.requires = values.get("requires", [])
