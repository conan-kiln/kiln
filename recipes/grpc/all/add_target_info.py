#!/usr/bin/env python3
"""
Processes gRPC build definition files (e.g. https://github.com/grpc/grpc/blob/v1.72.0/build_autogenerated.yaml)
into a format suitable for the Conan recipe.
"""
import re
import sys
from pathlib import Path

import requests
import yaml
from conan.tools.scm import Version

script_dir = Path(__file__).parent

unvendored = {
    "re2",
}

external_deps = {
    "re2": "re2::re2",
    "z": "zlib::zlib",
    "cares": "c-ares::cares",
    "libssl": "openssl::openssl",
    "protobuf": "protobuf::libprotobuf",
    "protoc": "protobuf::libprotoc",
}

abseil_irregular = {
    "absl/algorithm:container": "abseil::absl_algorithm_container",
    "absl/flags:flag": "abseil::absl_flags",
    "absl/flags:marshalling": "abseil::absl_flags_marshalling",
    "absl/flags:parse": "abseil::absl_flags_parse",
    "absl/flags:reflection": "abseil::absl_flags_reflection",
    "absl/flags:usage": "abseil::absl_flags_usage",
    "absl/log:globals": "abseil::absl_log_globals",
    "absl/random:bit_gen_ref": "abseil::absl_random_bit_gen_ref",
    "absl/random:distributions": "abseil::absl_random_distributions",
    "absl/random:random": "abseil::absl_random_random",
}


def fetch_build_data(version):
    url = f"https://raw.githubusercontent.com/grpc/grpc/refs/tags/v{version}/build_autogenerated.yaml"
    r = requests.get(url)
    r.raise_for_status()
    return yaml.safe_load(r.text)


def rename_dep(dep):
    dep = abseil_irregular.get(dep, dep)
    dep = re.sub(r"^absl/\w+:(\w+)$", r"abseil::absl_\1", dep)
    return external_deps.get(dep, dep)


def parse_build_data(data):
    all_targets = [
        v for v in data["libs"] + data["targets"] if v["build"] not in ["private", "test"] and not v.get("gtest")
    ]
    targets = {}
    plugins = {}
    for t in all_targets:
        name = t.pop("name")
        t.pop("public_headers", None)
        t.pop("headers", None)
        t.pop("src", None)
        t.pop("language", None)
        t.pop("build", None)
        t["deps"] = [rename_dep(x) for x in t.get("deps", [])]
        if name == t.get("lib"):
            del t["lib"]
        if name.endswith("_plugin"):
            plugins[name] = t
        elif name not in unvendored:
            targets[name] = t
    return targets, plugins


def write_target_info_yaml(targets, plugins, version):
    path = script_dir / "target_info" / f"grpc_{version}.yml"
    path.write_text(yaml.safe_dump({
        "targets": targets,
        "plugins": plugins,
    }, sort_keys=False))


def main(version):
    data = fetch_build_data(version)
    targets, plugins = parse_build_data(data)
    # The info for older versions is incomplete for some reason
    if Version(version) < "1.58.0":
        targets["upb"] = {"deps": []}
        targets["grpc"]["deps"].extend(["zlib::zlib", "c-ares::cares", "re2::re2"])
        targets["grpc_unsecure"]["deps"].extend(["zlib::zlib", "c-ares::cares"])
        targets["grpc_plugin_support"]["deps"].extend(["protobuf::libprotobuf", "protobuf::libprotoc"])
        targets["grpcpp_channelz"]["deps"].append("protobuf::libprotobuf")
        targets["grpc++_reflection"]["deps"].append("protobuf::libprotobuf")
        if Version(version) >= "1.51":
            targets["grpc_authorization_provider"]["deps"].extend(["zlib::zlib", "re2::re2"])
    write_target_info_yaml(targets, plugins, version)


if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage: python script.py <version>")
        sys.exit(1)
    main(sys.argv[1])
