Escape all invalid characters in targets, not just :/()+.
QtWebEngine otherwise fails to build when special characters (such as @) are present in the build dir path.

--- a/src/gn/ninja_action_target_writer.cc
+++ b/src/gn/ninja_action_target_writer.cc
@@ -4,6 +4,7 @@
 
 #include "gn/ninja_action_target_writer.h"
 
+#include <regex>
 #include <stddef.h>
 
 #include "base/strings/string_util.h"
@@ -140,7 +141,7 @@
   // there will be only one invocation so we can use a simple name.
   std::string target_label = target_->label().GetUserVisibleName(true);
   std::string custom_rule_name(target_label);
-  base::ReplaceChars(custom_rule_name, ":/()+", "_", &custom_rule_name);
+  custom_rule_name = std::regex_replace(custom_rule_name, std::regex("[^a-zA-Z0-9.]"), "_");
   custom_rule_name.append("_rule");
 
   const SubstitutionList& args = target_->action_values().args();
--- a/src/gn/ninja_create_bundle_target_writer.cc
+++ b/src/gn/ninja_create_bundle_target_writer.cc
@@ -5,6 +5,7 @@
 #include "gn/ninja_create_bundle_target_writer.h"
 
 #include <iterator>
+#include <regex>
 
 #include "base/strings/string_util.h"
 #include "gn/builtin_tool.h"
@@ -122,7 +123,7 @@
 
   std::string target_label = target_->label().GetUserVisibleName(true);
   std::string custom_rule_name(target_label);
-  base::ReplaceChars(custom_rule_name, ":/()", "_", &custom_rule_name);
+  custom_rule_name = std::regex_replace(custom_rule_name, std::regex("[^a-zA-Z0-9.]"), "_");
   custom_rule_name.append("_post_processing_rule");
 
   out_ << "rule " << custom_rule_name << std::endl;
