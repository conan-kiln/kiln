--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -40,11 +40,7 @@
 endif()
 
 # determine whether a Fortran compiler is required, based on the available optional dependencies
-find_library(HSL hsl)
-find_library(MA57 ma57)
-find_library(MA27 ma27)
-find_library(BQPD bqpd)
-if(HSL OR MA57 OR MA27 OR BQPD)
+if(WITH_HSL OR WITH_BQPD)
    message(STATUS "Fortran compiler required")
    enable_language(Fortran)
    include(FortranCInterface)
@@ -114,7 +110,12 @@
 endfunction()
 
 # HSL or MA57
-find_library(HSL hsl)
+if(WITH_HSL)
+   find_package(HSL REQUIRED)
+   set(HSL HSL::HSL)
+   set(MA57 HSL::HSL)
+   set(MA27 HSL::HSL)
+endif()
 if(HSL)
    link_to_uno(hsl ${HSL})
 else()
@@ -143,14 +144,15 @@
 endif()
 
 # METIS
-find_library(METIS metis)
-if(METIS)
-   link_to_uno(metis ${METIS})
+if(WITH_METIS)
+   find_package(METIS REQUIRED)
+   link_to_uno(metis metis::metis)
 endif()
 
 # BQPD
-find_library(BQPD bqpd)
-if(BQPD)
+if(WITH_BQPD)
+   find_package(BQPD REQUIRED)
+   set(BQPD bqpd)
    list(APPEND UNO_SOURCE_FILES
 		uno/ingredients/subproblem_solvers/BQPD/BQPDSolver.cpp
 		uno/ingredients/subproblem_solvers/BQPD/BQPDEvaluationSpace.cpp)
@@ -159,8 +161,8 @@
 endif()
 
 # HiGHS
-find_package(HIGHS)
-if(HIGHS_FOUND)
+if (WITH_HIGHS)
+   find_package(HIGHS REQUIRED)
    list(APPEND UNO_SOURCE_FILES
 		uno/ingredients/subproblem_solvers/HiGHS/HiGHSSolver.cpp
 		uno/ingredients/subproblem_solvers/HiGHS/HiGHSEvaluationSpace.cpp)
@@ -171,12 +173,13 @@
 endif()
 
 # MUMPS
-find_package(MUMPS)
-if(MUMPS_LIBRARY)
+if(WITH_MUMPS)
+   find_package(MUMPS REQUIRED)
    list(APPEND UNO_SOURCE_FILES uno/ingredients/subproblem_solvers/MUMPS/MUMPSSolver.cpp)
    list(APPEND TESTS_UNO_SOURCE_FILES unotest/functional_tests/MUMPSSolverTests.cpp)
-   list(APPEND LIBRARIES ${MUMPS_LIBRARY} ${MUMPS_COMMON_LIBRARY} ${MUMPS_PORD_LIBRARY})
-
+   list(APPEND LIBRARIES ${MUMPS_LIBRARIES})
+endif()
+if(0)
    list(APPEND DIRECTORIES ${MUMPS_INCLUDE_DIR})
 
    if(NOT MUMPS_MPISEQ_LIBRARY)
@@ -259,16 +262,13 @@
 ######################
 # optional AMPL main #
 ######################
-find_library(AMPLSOLVER amplsolver)
-if(AMPLSOLVER)
+if(WITH_ASL)
+   find_package(ampl-asl REQUIRED)
    message(STATUS "Found amplsolver")
-   add_executable(uno_ampl EXCLUDE_FROM_ALL bindings/AMPL/AMPLModel.cpp bindings/AMPL/uno_ampl.cpp)
+   add_executable(uno_ampl bindings/AMPL/AMPLModel.cpp bindings/AMPL/uno_ampl.cpp)
    target_include_directories(uno_ampl PUBLIC ${DIRECTORIES})
-   target_link_libraries(uno_ampl PUBLIC ${DEFAULT_UNO_LIB} ${AMPLSOLVER} ${LIBRARIES} ${CMAKE_DL_LIBS} ${FORTRAN_LIBS})
+   target_link_libraries(uno_ampl PUBLIC ${DEFAULT_UNO_LIB} asl ${LIBRARIES} ${CMAKE_DL_LIBS} ${FORTRAN_LIBS})
    add_definitions("-D HAS_AMPLSOLVER")
-   # include the corresponding directory
-   get_filename_component(directory ${AMPLSOLVER} DIRECTORY)
-   include_directories(${directory})
 endif()
 
 ##################################
