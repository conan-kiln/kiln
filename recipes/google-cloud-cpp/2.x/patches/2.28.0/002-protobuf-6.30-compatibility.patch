From 388dddb2be28e62d33181b8e610312b047b9f619 Mon Sep 17 00:00:00 2001
From: Lev Kandel <lmakhlis@google.com>
Date: Thu, 7 Nov 2024 15:53:30 +0000
Subject: [PATCH 1/6] Prepare code for breaking change in Protobuf C++ API.

Protobuf 6.30.0 will change the return types of Descriptor::name() and other methods to absl::string_view.
This makes the code work both before and after such a change.
---
 google/cloud/spanner/internal/status_utils.cc | 3 ++-
 google/cloud/spanner/proto_enum.h             | 3 ++-
 google/cloud/spanner/proto_message.h          | 3 ++-
 4 files changed, 8 insertions(+), 4 deletions(-)

diff --git a/google/cloud/spanner/internal/status_utils.cc b/google/cloud/spanner/internal/status_utils.cc
index 4a93d32a5c138..a5d444e61827e 100644
--- a/google/cloud/spanner/internal/status_utils.cc
+++ b/google/cloud/spanner/internal/status_utils.cc
@@ -14,8 +14,9 @@
 
 #include "google/cloud/spanner/internal/status_utils.h"
 #include "google/cloud/grpc_error_delegate.h"
+#include "google/cloud/internal/absl_str_cat_quiet.h"
 #include "google/cloud/internal/status_payload_keys.h"
 #include "absl/strings/match.h"
 #include <google/rpc/error_details.pb.h>
 #include <google/rpc/status.pb.h>
 #include <google/spanner/v1/spanner.pb.h>
@@ -38,7 +38,8 @@ bool IsSessionNotFound(google::cloud::Status const& status) {
     for (google::protobuf::Any const& any : proto.details()) {
       if (any.UnpackTo(&resource_info)) {
         google::spanner::v1::Session session;
-        auto session_url = "type.googleapis.com/" + session.GetTypeName();
+        auto session_url =
+            absl::StrCat("type.googleapis.com/", session.GetTypeName());
         return resource_info.resource_type() == session_url;
       }
     }
diff --git a/google/cloud/spanner/proto_enum.h b/google/cloud/spanner/proto_enum.h
index d43c5021a6ca9..71b7eabf29b14 100644
--- a/google/cloud/spanner/proto_enum.h
+++ b/google/cloud/spanner/proto_enum.h
@@ -57,7 +57,10 @@ class ProtoEnum {
   explicit operator enum_type() const { return v_; }
 
   /// The fully-qualified name of the enum type, scope delimited by periods.
-  static std::string const& TypeName() { return Descriptor()->full_name(); }
+  static std::string const& TypeName() {
+    static std::string const kName(Descriptor()->full_name());
+    return kName;
+  }
 
   /// @name Relational operators
   ///@{
diff --git a/google/cloud/spanner/proto_message.h b/google/cloud/spanner/proto_message.h
index 9ca3e821e0da4..22b3373fde2d1 100644
--- a/google/cloud/spanner/proto_message.h
+++ b/google/cloud/spanner/proto_message.h
@@ -73,8 +73,9 @@ class ProtoMessage {
   explicit operator std::string() const { return serialized_message_; }
 
   /// The fully-qualified name of the message type, scope delimited by periods.
-  static std::string const& TypeName() {
-    return message_type::GetDescriptor()->full_name();
+  static std::string const& TypeName() {
+    static std::string const kName(message_type::GetDescriptor()->full_name());
+    return kName;
   }
 
   /// @name Relational operators
