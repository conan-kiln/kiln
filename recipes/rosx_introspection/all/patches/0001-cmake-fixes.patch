--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,13 +1,8 @@
-cmake_minimum_required(VERSION 3.10)
+cmake_minimum_required(VERSION 3.15)
 
-project(rosx_introspection  LANGUAGES C CXX VERSION 1.0.0)
+project(rosx_introspection LANGUAGES CXX VERSION 1.0.0)
 
-# Build flags
-#---- Enable C++17 ----
-set(CMAKE_CXX_STANDARD 17)
-set(CMAKE_CXX_STANDARD_REQUIRED ON)
-
-set(CMAKE_POSITION_INDEPENDENT_CODE ON)
+option(CMAKE_POSITION_INDEPENDENT_CODE "Enable -fPIC" ON)
 
 find_package(ament_cmake QUIET)
 
@@ -26,11 +21,7 @@
 find_package(RapidJSON REQUIRED)
 
 if(NOT USING_ROS2 )
-    message(STATUS "[FastCdr] not found, create static libraries")
-    # Override Fast-CDR option: compile as static lib
-    SET(BUILD_SHARED_LIBS OFF CACHE BOOL "Create static libraries by default")
-    add_subdirectory(3rdparty/Fast-CDR)
-    include_directories(3rdparty/Fast-CDR/include)
+    find_package(fastcdr REQUIRED)
 else()
     # Mention that FastCdr has been found on system
     message(STATUS "[FastCdr] found, version: ${fastcdr_VERSION}")
@@ -39,7 +30,7 @@
 ###############################################
 ## Declare a C++ library
 ###############################################
-add_library(rosx_introspection STATIC
+add_library(rosx_introspection
     ${SRC_FILES}
     src/ros_type.cpp
     src/ros_field.cpp
@@ -50,6 +41,8 @@
     src/serializer.cpp
     ${EXTRA_SRC}
     )
+target_link_libraries(rosx_introspection PRIVATE rapidjson fastcdr)
+target_compile_features(rosx_introspection PUBLIC cxx_std_17)
 
 if(USING_ROS2)
     ament_target_dependencies(rosx_introspection
@@ -87,21 +80,20 @@
             $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>)
     endif()
 
-    install(
-        DIRECTORY include/
-        DESTINATION include
-        )
-
-    install(TARGETS rosx_introspection
-        EXPORT rosx_introspectionTargets
-        ARCHIVE DESTINATION lib
-        LIBRARY DESTINATION lib
-        RUNTIME DESTINATION bin
-        INCLUDES DESTINATION include
-        )
-
     ament_export_targets(rosx_introspectionTargets HAS_LIBRARY_TARGET)
     ament_export_dependencies(ament_index_cpp rosbag2_cpp fastcdr)
     ament_package()
+endif()
 
-endif()
+install(
+    DIRECTORY include/
+    DESTINATION include
+)
+
+install(TARGETS rosx_introspection
+    EXPORT rosx_introspectionTargets
+    ARCHIVE DESTINATION lib
+    LIBRARY DESTINATION lib
+    RUNTIME DESTINATION bin
+    INCLUDES DESTINATION include
+)
