diff --git a/vl/generic.c b/vl/generic.c
index d0f3db4..42434c3 100644
--- a/vl/generic.c
+++ b/vl/generic.c
@@ -1632,14 +1632,12 @@ vl_constructor (void)
 void
 vl_destructor ()
 {
-  VlState * state ;
 #if defined(DEBUG)
   printf("VLFeat DEBUG: destructor begins.\n") ;
 #endif
 
-  state = vl_get_state() ;
-
 #if ! defined(VL_DISABLE_THREADS)
+  VlState * state = vl_get_state() ;
 #if defined(DEBUG)
   printf("VLFeat DEBUG: destroying a thread specific state instance.\n") ;
 #endif
diff --git a/vl/sift.c b/vl/sift.c
index 3739f49..c69d6e7 100644
--- a/vl/sift.c
+++ b/vl/sift.c
@@ -668,9 +668,7 @@ Gaussian window size is set to have standard deviation
 /** @internal @brief Use bilinear interpolation to compute orientations */
 #define VL_SIFT_BILINEAR_ORIENTATIONS 1
 
-#define EXPN_SZ  256          /**< ::fast_expn table size @internal */
 #define EXPN_MAX 25.0         /**< ::fast_expn table max  @internal */
-double expn_tab [EXPN_SZ+1] ; /**< ::fast_expn table      @internal */
 
 #define NBO 8
 #define NBP 4
@@ -689,7 +687,7 @@ double expn_tab [EXPN_SZ+1] ; /**< ::fast_expn table      @internal */
  **/
 
 VL_INLINE double
-fast_expn (double x)
+fast_expn (VlSiftFilt const * filter, double x)
 {
   double a,b,r ;
   int i ;
@@ -700,8 +698,8 @@ fast_expn (double x)
   x *= EXPN_SZ / EXPN_MAX ;
   i = (int)vl_floor_d (x) ;
   r = x - i ;
-  a = expn_tab [i    ] ;
-  b = expn_tab [i + 1] ;
+  a = filter->expn_tab [i    ] ;
+  b = filter->expn_tab [i + 1] ;
   return a + r * (b - a) ;
 }
 
@@ -711,11 +709,11 @@ fast_expn (double x)
  **/
 
 VL_INLINE void
-fast_expn_init ()
+fast_expn_init (VlSiftFilt * filter)
 {
   int k  ;
   for(k = 0 ; k < EXPN_SZ + 1 ; ++ k) {
-    expn_tab [k] = exp (- (double) k * (EXPN_MAX / EXPN_SZ)) ;
+    filter->expn_tab [k] = exp (- (double) k * (EXPN_MAX / EXPN_SZ)) ;
   }
 }
 
@@ -928,7 +926,7 @@ vl_sift_new (int width, int height,
   f-> grad_o  = o_min - 1 ;
 
   /* initialize fast_expn stuff */
-  fast_expn_init () ;
+  fast_expn_init (f) ;
 
   return f ;
 }
@@ -1443,7 +1441,6 @@ vl_sift_detect (VlSiftFilt * f)
  ** @remark The minimum octave size is 2x2xS.
  **/
 
-#define update_gradient vl_sift_update_gradient
 void
 vl_sift_update_gradient (VlSiftFilt *f)
 {
@@ -1602,9 +1599,6 @@ vl_sift_calc_keypoint_orientations (VlSiftFilt *f,
     return 0 ;
   }
 
-  /* make gradient up to date */
-  update_gradient (f) ;
-
   /* clear histogram */
   memset (hist, 0, sizeof(double) * nbins) ;
 
@@ -1629,7 +1623,7 @@ vl_sift_calc_keypoint_orientations (VlSiftFilt *f,
       /* limit to a circular window */
       if (r2 >= W*W + 0.6) continue ;
 
-      wgt  = fast_expn (r2 / (2*sigmaw*sigmaw)) ;
+      wgt  = fast_expn (f, r2 / (2*sigmaw*sigmaw)) ;
       mod  = *(pt + xs*xo + ys*yo    ) ;
       ang  = *(pt + xs*xo + ys*yo + 1) ;
       fbin = nbins * ang / (2 * VL_PI) ;
@@ -1834,7 +1828,7 @@ vl_sift_calc_raw_descriptor (VlSiftFilt const *f,
        * NBP/2. */
       vl_sift_pix const wsigma = f->windowSize ;
       vl_sift_pix win = fast_expn
-        ((nx*nx + ny*ny)/(2.0 * wsigma * wsigma)) ;
+        (f, (nx*nx + ny*ny)/(2.0 * wsigma * wsigma)) ;
 
       /* The sample will be distributed in 8 adjacent bins.
          We start from the ``lower-left'' bin. */
@@ -1983,9 +1977,6 @@ vl_sift_calc_keypoint_descriptor (VlSiftFilt *f,
      si    >  f->s_max - 2     )
     return ;
 
-  /* synchronize gradient buffer */
-  update_gradient (f) ;
-
   /* VL_PRINTF("W = %d ; magnif = %g ; SBP = %g\n", W,magnif,SBP) ; */
 
   /* clear descriptor */
@@ -2031,7 +2022,7 @@ vl_sift_calc_keypoint_descriptor (VlSiftFilt *f,
        * NBP/2. */
       vl_sift_pix const wsigma = f->windowSize ;
       vl_sift_pix win = fast_expn
-        ((nx*nx + ny*ny)/(2.0 * wsigma * wsigma)) ;
+        (f, (nx*nx + ny*ny)/(2.0 * wsigma * wsigma)) ;
 
       /* The sample will be distributed in 8 adjacent bins.
          We start from the ``lower-left'' bin. */
diff --git a/vl/sift.h b/vl/sift.h
index 5d996d3..d9c851d 100644
--- a/vl/sift.h
+++ b/vl/sift.h
@@ -47,6 +47,8 @@ typedef struct _VlSiftKeypoint
  ** This filter implements the SIFT detector and descriptor.
  **/
 
+#define EXPN_SZ  256          /**< ::fast_expn table size @internal */
+
 typedef struct _VlSiftFilt
 {
   double sigman ;       /**< nominal image smoothing. */
@@ -86,6 +88,8 @@ typedef struct _VlSiftFilt
   vl_sift_pix *grad ;   /**< GSS gradient data. */
   int grad_o ;          /**< GSS gradient data octave. */
 
+  double expn_tab [EXPN_SZ+1] ; /**< ::fast_expn table @internal */
+
 } VlSiftFilt ;
 
 /** @name Create and destroy
