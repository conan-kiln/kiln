diff --git a/CMakeLists.txt b/CMakeLists.txt
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -2,7 +2,6 @@
 
 list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake_config")
 
-include(NVSHMEMEnv)
 include(CMakePackageConfigHelpers)
 
 enable_testing()
@@ -60,8 +59,10 @@
   set_property(CACHE CMAKE_INSTALL_PREFIX PROPERTY VALUE "${NVSHMEM_PREFIX}")
 endif()
 
+include(NVSHMEMEnv)
+
 find_package(CUDAToolkit)
-find_package(CCCL PATHS ${CUDAToolkit_LIBRARY_DIR}/cmake/cccl)
+include_directories(${CUDAToolkit_INCLUDE_DIRS})
 
 if(DEFINED CMAKE_CUDA_ARCHITECTURES_UNDEFINED)
   if(NOT DEFINED CUDA_ARCHITECTURES_UNDEFINED)
@@ -105,40 +106,17 @@
 
 # Find the internal nccl.h file first.
 if(NVSHMEM_USE_NCCL)
-  find_path(
-    NCCL_INCLUDE nccl.h
-    HINTS ${CMAKE_SOURCE_DIR} ${NCCL_HOME}
-    PATH_SUFFIXES include_nccl include lib64
-  )
+  find_package(nccl REQUIRED)
+  set(NCCL_INCLUDE ${nccl_INCLUDE_DIRS})
 endif()
 
 if(NVSHMEM_USE_GDRCOPY)
-  find_path(
-    GDRCOPY_INCLUDE gdrapi.h
-    PATHS /usr/local/gdrcopy /usr/local/gdrdrv ${CMAKE_SOURCE_DIR}
-    HINTS ${CMAKE_SOURCE_DIR} /usr/local/gdrcopy /usr/local/gdrdrv ${GDRCOPY_HOME}
-    PATH_SUFFIXES include_gdrcopy include
-  )
+  find_package(gdrcopy REQUIRED)
+  set(GDRCOPY_INCLUDE ${gdrcopy_INCLUDE_DIRS})
 endif()
 
 if(NVSHMEM_SHMEM_SUPPORT)
-  find_library(
-    SHMEM_LIB
-    NAMES oshmem
-    HINTS ${SHMEM_HOME}
-    PATH_SUFFIXES lib lib64)
-  find_path(SHMEM_INCLUDE NAME shmem.h HINTS ${SHMEM_HOME}
-            PATH_SUFFIXES include
-  )
-  add_library(shmem IMPORTED INTERFACE)
-  target_link_libraries(shmem INTERFACE ${SHMEM_LIB})
-  target_include_directories(shmem INTERFACE ${SHMEM_INCLUDE})
-  if(NVSHMEM_MPI_SUPPORT)
-    separate_arguments(SHMEM_C_LINK_FLAGS NATIVE_COMMAND "${MPI_C_LINK_FLAGS}")
-    target_link_options(shmem INTERFACE ${SHMEM_C_LINK_FLAGS})
-    target_compile_definitions(shmem INTERFACE ${MPI_C_COMPILE_DEFINITIONS})
-    target_compile_options(shmem INTERFACE ${MPI_C_COMPILE_OPTIONS})
-  endif()
+  find_package(MPI REQUIRED)
 endif()
 
 ## Find Packages End
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -31,6 +31,9 @@
                                 -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}
                                 -DCMAKE_CUDA_HOST_COMPILER=${CMAKE_CUDA_HOST_COMPILER}
                                 -DPROJECT_VERSION=${PROJECT_VERSION}
+                                -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
+                                -DCMAKE_CUDA_COMPILER=nvcc
+                                -DCMAKE_CUDA_ARCHITECTURES=${CMAKE_CUDA_ARCHITECTURES}
 				$ENV{CMAKE_CCACHE_FLAGS}
                     CMAKE_CACHE_ARGS ${my_cmake_cache_args}
                     STEP_TARGETS build install
@@ -68,9 +71,12 @@
   # Note - today we do optimization to avoid having a too large bitcode file. There are, as of clang 18, some existing
   # limitations around compiling device libraries which make optimizing this library fine. Once these issues are fixed
   # we will have to remove optimizations to enable more flexible builds.
+  foreach(inc_dir ${CUDAToolkit_INCLUDE_DIRS})
+    list(APPEND CTK_INCLUDE_FLAGS "-I${inc_dir}")
+  endforeach()
   add_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/lib/libnvshmem_device.bc
                     COMMAND clang -c -emit-llvm -O1 -std=${BITCODE_CXX_STD} -x cuda --cuda-path=${CUDA_HOME} --cuda-device-only
-                    --cuda-gpu-arch=${BITCODE_LIB_ARCH} -I ${CMAKE_CURRENT_SOURCE_DIR}/include -I ${CUDA_HOME}/include/cccl
+                    --cuda-gpu-arch=${BITCODE_LIB_ARCH} -I ${CMAKE_CURRENT_SOURCE_DIR}/include ${CTK_INCLUDE_FLAGS}
                     -I ${CMAKE_CURRENT_BINARY_DIR}/llvm_lib
                     -D__clang_llvm_bitcode_lib__ ${CMAKE_CURRENT_SOURCE_DIR}/device/init/init_device.cu -o libnvshmem_device.bc.unoptimized
                     COMMAND opt --passes='internalize,inline,globaldce'
@@ -147,7 +153,8 @@
   set(ACTIVE_BOOTSTRAPS ${ACTIVE_BOOTSTRAPS} nvshmem_bootstrap_pmix)
   target_sources(nvshmem_bootstrap_pmix PRIVATE modules/bootstrap/common/bootstrap_util.cpp
                                                 modules/bootstrap/pmix/bootstrap_pmix.c)
-  find_library(PMIX_lib NAMES pmix HINTS "${PMIX_HOME}/lib")
+  find_package(openpmix REQUIRED)
+  set(PMIX_lib openpmix::openpmix)
   target_link_libraries(nvshmem_bootstrap_pmix PRIVATE ${PMIX_lib})
   target_include_directories(nvshmem_bootstrap_pmix
                              PRIVATE include
@@ -453,7 +460,8 @@
 endif()
 
 if(NVSHMEM_IBDEVX_SUPPORT OR NVSHMEM_IBGDA_SUPPORT)
-  find_library(MLX5_lib NAMES mlx5)
+  find_package(rdma-core REQUIRED)
+  set(MLX5_lib rdma-core::libmlx5)
 endif()
 
 if(NVSHMEM_IBDEVX_SUPPORT)
@@ -526,7 +534,8 @@
 endif()
 
 if(NVSHMEM_LIBFABRIC_SUPPORT)
-  find_library(FABRIC_lib NAMES fabric HINTS "${LIBFABRIC_HOME}/lib" "${LIBFABRIC_HOME}/lib64")
+  find_package(libfabric REQUIRED)
+  set(FABRIC_lib libfabric::libfabric)
   add_library(
     nvshmem_transport_libfabric SHARED
   )
@@ -890,14 +899,14 @@
               GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE
 )
 
-install(
+message(TRACE
   FILES ${CMAKE_BINARY_DIR}/lib/cmake/nvshmem/NVSHMEMDeviceTargets.cmake
   DESTINATION lib/cmake/nvshmem/
   PERMISSIONS OWNER_READ OWNER_WRITE
               GROUP_READ WORLD_READ
 )
 
-install(
+message(TRACE
   FILES ${CMAKE_BINARY_DIR}/lib/cmake/nvshmem/NVSHMEMDeviceTargets-$<LOWER_CASE:${CMAKE_BUILD_TYPE}>.cmake
   DESTINATION lib/cmake/nvshmem/
   PERMISSIONS OWNER_READ OWNER_WRITE
